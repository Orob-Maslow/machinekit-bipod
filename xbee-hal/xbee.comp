component xbee "xbee serial";
pin in float pos_;
pin out float batt_;
pin in float scale = 20.0;

function _;
option extra_setup;
license "GPL"; // indicates GPL v2 or later
;;

#include <stdio.h>
#include <stdlib.h>
#include <termios.h>
#include <fcntl.h>

int fd;

struct {
    char pos;
    char cksum;
} tx;

struct {
    unsigned short batt;
    unsigned char cksum;
} rx;

#define RX_SIZE 3 //computed as 4 but on the atmel it's 3


EXTRA_SETUP()
{
    if ((fd = open("/dev/ttyO1", O_RDWR | O_NONBLOCK))<0)
    {
        printf("UART: Failed to open the file.\n");
        return;
    }

    struct termios options; // the termios structure is vital
    tcgetattr(fd, &options); // sets the parameters associated with file

    // Set up the communications options:
    // 57600 baud, 8-bit, enable receiver, no modem control lines
    options.c_cflag = B57600 | CS8 | CREAD | CLOCAL;
    tcflush(fd, TCIFLUSH); // discard file information not transmitted
    tcsetattr(fd, TCSANOW, &options); // changes occur immmediately
    return 0;
}

char CRC8(char *data, char len) 
{
    char crc = 0x00;
    while (len--)
    {
        char extract = *data++;
        char tempI;
        for (tempI = 8; tempI; tempI--) 
        {
            char sum = (crc ^ extract) & 0x01;
            crc >>= 1;
            if(sum) 
            {
                crc ^= 0x8C;
            }
            extract >>= 1;
        }
    }
    return crc;
}

FUNCTION(_)
{
    tx.pos = pos_ * scale;
    char buf[sizeof(tx)];
    memcpy(&buf, &tx, sizeof(tx));
    tx.cksum = CRC8(buf,sizeof(tx)-1);
    memcpy(&buf, &tx, sizeof(tx));

    write (fd, buf, sizeof(tx));
    usleep (35 * 1000); // sleep enough time for the chars to get sent

    char rx_buf[RX_SIZE];
    int n = read (fd, rx_buf, RX_SIZE);

    //copy buffer to structure
    memcpy(&rx, &rx_buf, RX_SIZE);
    if(rx.cksum != CRC8(rx_buf,RX_SIZE-1))
        batt_ = -1;
    else
        batt_ = rx.batt;

}
